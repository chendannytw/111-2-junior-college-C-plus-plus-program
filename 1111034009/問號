// Fig. 12.3: fig12_03.c
// Inserting and deleting nodes in a list
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// self-referential structure                       
struct listNode {                                      
   //char data; // each listNode contains a character 
   struct listNode *nextPtr; // pointer to next node
   int ID;
   int Math;
   int Computer;
   char Name[10];  
}; 

typedef struct listNode ListNode; // synonym for struct listNode
typedef ListNode *ListNodePtr; // synonym for ListNode*

// prototypes
void insert(ListNodePtr *sPtr, int xID, char xName[10], int xMath, int xComputer);
char delete(ListNodePtr *sPtr, char value);
int isEmpty(ListNodePtr sPtr);
void printList(ListNodePtr currentPtr);
void instructions(void);

int main(void)
{ 
   ListNodePtr startPtr = NULL; // initially there are no nodes
   //char item='a'; // char entered by user
   int id=999,math=0,computer=0;
   char name[10]="";
   int havedel=0;

  instructions(); // display the menu
   printf("%s", "? ");
   unsigned int choice; // user's choice unsigned=正整數 
   scanf("%u", &choice);

   // loop while user does not choose 3
   while (choice != 3) { 

      switch (choice) { 
         case 1:
            printf("\n%s", "輸入號碼:");
            scanf("\n%d", &id);
            printf("\n%s", "輸入名字:");
            scanf("\n%s", &name);
   	        printf("\n%s", "輸入數學成績:");
   	        scanf("\n%d", &math);
   	        printf("\n%s", "輸入電腦成績:");
            scanf("\n%d", &computer);
            insert(&startPtr, id, name, math, computer); // insert item in list
            printList(startPtr);
            break;
         case 2: // delete an element
            // if list is not empty
            if (!isEmpty(startPtr)) { 
               printf("%s", "輸入號碼來刪除: ");
               scanf("\n%d", &id);
               
               while(delete(&startPtr, id)){
                	havedel =1;
 			   }
               //printf("%d",havedel) ;

               // if character is found, remove it   
               if (havedel == 1 ) { // remove item
                  if(!isEmpty(startPtr)){
                  	printf("%d 刪除.\n", id);
                    printList(startPtr);
				  }
				  else{
                    puts("空蕩蕩!.\n");
				  }
               } 
               else {
                  printf("%c 未找到.\n\n", id);
               }
            } 
            else {
               puts("空蕩蕩!.\n");
            }
            break;
            
         default:
            puts("無效指令.\n");
            instructions();
            break;
      } // end switch

      printf("%s", "? ");
      scanf("%u", &choice);
   } 

   puts("結束.");
   
/*   while(item!='q'){
   	    printf("%s", "Enter a ID");
   	    printf("%s", "Enter a math");
   	    printf("%s", "Enter a computer");
        scanf("\n%d", &id);
        scanf("\n%d", &math);
        scanf("\n%d", &computer);
        insert(&startPtr, id, math, computer); // insert item in list
        printList(startPtr);
   }*/
} 

// display program instructions to user
void instructions(void)
{ 
   puts("Enter your choice:\n"
      "   選擇1來輸入陣列.\n"
      "   選擇2來刪除.\n"
      "   選擇3結束.");
} 

// insert a new value into the list in sorted order
void insert(ListNodePtr *sPtr, int xID, char *xName, int xMath, int xComputer)
{ 
   ListNodePtr newPtr = malloc(sizeof(ListNode)); // create node

   if (newPtr != NULL) { // is space available
      newPtr->ID = xID; // place value in node
      *strcpy(newPtr->Name,xName); // place value in node
      newPtr->Math = xMath; // place value in node
      newPtr->Computer = xComputer; // place value in node
      newPtr->nextPtr = NULL; // node does not link to another node

      ListNodePtr previousPtr = NULL;
      ListNodePtr currentPtr = *sPtr;

      // loop to find the correct location in the list       
      while (currentPtr != NULL && xID > currentPtr->ID) {
         previousPtr = currentPtr; // walk to ...               
         currentPtr = currentPtr->nextPtr; // ... next node 
      }                                          

      // insert new node at beginning of list
      if (previousPtr == NULL) { 
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      } 
      else { // insert new node between previousPtr and currentPtr
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      } 
   } 
   else {
      printf("%c 你輸入得無法插入，並無記憶可用.\n", xID, xName, xMath, xComputer);
   } 
} 

// delete a list element
char delete(ListNodePtr *sPtr, char value)
{ 
   if (isEmpty(*sPtr)) { 
   return 0;
   }

   // delete first node if a match is found
   if (value == (*sPtr)->ID) { 
      ListNodePtr tempPtr = *sPtr; // hold onto node being removed
      *sPtr = (*sPtr)->nextPtr; // de-thread the node
      free(tempPtr); // free the de-threaded node
      return value;
   } 
   else { 
      ListNodePtr previousPtr = *sPtr;
      ListNodePtr currentPtr = (*sPtr)->nextPtr;

      // loop to find the correct location in the list
      while (currentPtr != NULL && currentPtr->ID != value) { 
         previousPtr = currentPtr; // walk to ...  
         currentPtr = currentPtr->nextPtr; // ... next node  
      } 

      // delete node at currentPtr
      if (currentPtr != NULL) {
         ListNodePtr tempPtr = currentPtr;
         previousPtr->nextPtr = currentPtr->nextPtr;
         free(tempPtr);
         

         return value;
      } 
   } 

   return '\0';
} 

// return 1 if the list is empty, 0 otherwise
int isEmpty(ListNodePtr sPtr)
{ 
   return sPtr == NULL;
} 

// print the list
void printList(ListNodePtr currentPtr)
{ 
   // if list is empty
   if (isEmpty(currentPtr)) {
      puts("空蕩蕩.\n");
   } 
   else { 
      puts("有:");

      // while not the end of the list
      //while (currentPtr != NULL) { 
      while (currentPtr != NULL) { 
         printf("%d %s %d %d --> ", currentPtr->ID, currentPtr->Name, currentPtr->Math, currentPtr->Computer);
         currentPtr = currentPtr->nextPtr; 
      } 

      puts("NULL\n");
   } 
} 
