#include <stdio.h>
#include <stdlib.h>
                
struct listNode {                                      
   int ID; 
   int math, com;
   struct listNode *nextPtr; 
}; 

typedef struct listNode ListNode; 
typedef ListNode *ListNodePtr; 


void insert(ListNodePtr *sPtr, int id, int math, int computer);
char delete(ListNodePtr *sPtr, int value);
int isEmpty(ListNodePtr sPtr);
void printList(ListNodePtr currentPtr);
void instructions(void);

int main(void)
{ 
   ListNodePtr startPtr = NULL; 
   int item,math, computer; 

   instructions(); 
   printf("%s", "? ");
   unsigned int choice; 
   scanf("%u", &choice);

  
   while (choice != 3) { 

      switch (choice) { 
         case 1:
            printf("%s", "請輸入學號: ");
            scanf("\n%d", &item);
            printf("%s", "請輸入數學: ");
            scanf("\n%d", &math);
            printf("%s", "請輸入電腦: ");
            scanf("\n%d", &computer);
            insert(&startPtr, item,math,computer); 
            printList(startPtr);
            break;
         case 2: 
         
            if (!isEmpty(startPtr)) { 
               printf("%s", "輸入學號: ");
               scanf("\n%d", &item);

               // if character is found, remove it
               if (delete(&startPtr, item)) { // remove item
                  printf("%d deleted.\n", item);
                  printList(startPtr);
               } 
               else {
                  printf("%d not found.\n\n", item);
               } 
            } 
            else {
               puts("List is empty.\n");
            }    

            break;
         default:
            puts("Invalid choice.\n");
            instructions();
            break;
      } // end switch

      printf("%s", "? ");
      scanf("%u", &choice);
   } 

   puts("End of run.");
} 

// display program instructions to user
void instructions(void)
{ 
   puts("Enter your choice:\n"
      "   1 to insert an element into the list.\n"
      "   2 to delete an element from the list.\n"
      "   3 to end.");
} 

// insert a new value into the list in sorted order
void insert(ListNodePtr *sPtr, int id, int math, int computer)
{ 
   ListNodePtr newPtr = malloc(sizeof(ListNode)); // create node

   if (newPtr != NULL) { // is space available
      newPtr->ID = id; // place value in node
      newPtr->math = math; // place value in node
      newPtr->com = computer; // place value in node
      newPtr->nextPtr = NULL; // node does not link to another node

      ListNodePtr previousPtr = NULL;
      ListNodePtr currentPtr = *sPtr;

      // loop to find the correct location in the list       
      while (currentPtr != NULL && id > currentPtr->ID) {
         previousPtr = currentPtr; // walk to ...               
         currentPtr = currentPtr->nextPtr; // ... next node 
      }                                          

      // insert new node at beginning of list
      if (previousPtr == NULL) { 
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      } 
      else { // insert new node between previousPtr and currentPtr
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      } 
   } 
   else {
      printf("%c not inserted. No memory available.\n", id);
   } 
} 


char delete(ListNodePtr *sPtr, int value) //刪除 
{ 
   char deleted = '\0'; 


   while (*sPtr != NULL) {
    
      if (value == (*sPtr)->ID) { 
         ListNodePtr tempPtr = *sPtr; //要刪掉的地方 
         *sPtr = (*sPtr)->nextPtr;  //解除鏈接 
         free(tempPtr); 
         deleted = 'y'; 
      } 
    
      else { 
         sPtr = &((*sPtr)->nextPtr);
      } 
   } 

   return deleted;
}
/*
char delete(ListNodePtr *sPtr, int value) {
    char deleted = '\0';
    ListNodePtr currentPtr = *sPtr;
    ListNodePtr previousPtr = NULL;
    ListNodePtr tempPtr = NULL;

    while (currentPtr != NULL) {
        if (currentPtr->ID == value) {
            tempPtr = currentPtr;

            if (previousPtr == NULL) {
                // First node needs to be deleted
                *sPtr = currentPtr->nextPtr;
            } else {
                // Remove node from the middle or end
                previousPtr->nextPtr = currentPtr->nextPtr;
            }

            currentPtr = currentPtr->nextPtr; // Move to the next node
            free(tempPtr); // Free the memory for the deleted node

            deleted = '1';
        } else {
            previousPtr = currentPtr;
            currentPtr = currentPtr->nextPtr;
        }
    }

    return deleted;
}*/
// return 1 if the list is empty, 0 otherwise
int isEmpty(ListNodePtr sPtr)
{ 
   return sPtr == NULL;
} 

// print the list
void printList(ListNodePtr currentPtr)
{ 
   // if list is empty
   if (isEmpty(currentPtr)) {
      puts("List is empty.\n");
   } 
   else { 
      puts("鏈結串列內容為:");

      // while not the end of the list
      while (currentPtr != NULL) { 
         printf("%d %d %d--> ", currentPtr->ID,currentPtr->math,currentPtr->com);
         currentPtr = currentPtr->nextPtr;   
      } 

      puts("NULL\n");
   } 
} 
