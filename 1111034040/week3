// Fig. 10.9: fig10_09.c
// Using the bitwise AND, bitwise inclusive OR, bitwise
// exclusive OR and bitwise complement operators
#include <stdio.h>

void displayBits(unsigned int value); // prototype
void shiftbits(int, int, int);
int main(void)
{
    // demonstrate bitwise AND (&)
    unsigned int number1 = 65535;
    unsigned int mask = 1, dir = 0;
    puts("input number: ");
    scanf_s("%d", &number1);
    puts("The result of combining the following: ");
    scanf_s("%d", &mask);
    puts("using the bitwise AND operator & is: ");
    scanf_s("%d", &dir);
    displayBits(number1);
    displayBits(mask);
    shiftbits(number1, mask, dir);
}

void shiftbits(int number1, int mask, int dir)
{
    if (dir == 0)
        number1 = number1 >> mask;
    else
        number1 = number1 << mask;

    displayBits(number1);
}

// display bits of an unsigned int value
void displayBits(unsigned int value)
{
    // declare displayMask and left shift 31 bits
    unsigned int c, displayMask = 1 << 31;

    printf("%10u = ", value);

    // loop through bits
    for (c = 1; c <= 32; ++c) {
        putchar(value & displayMask ? '1' : '0');
        value <<= 1; // shift value left by 1


        if (c % 8 == 0) { // output a space after 8 bits
            putchar(' ');
        }
    }

    putchar('\n');
}
