/*寫一個主程式及位元位移(bits shifting)副程式，使用三個參數：value(被位移的變數)、左移或右移的設定、bits(位移的位元數量)；最後印出value位移前與位移後的二進位值。


參考程式碼*/
#include <stdio.h>

void displayBits(unsigned int value);
void shiftBits(int,int,int);
int main(void)
{
    // demonstrate bitwise AND (&)

    int number1, mask, dir;
    puts("輸入number1:");
    scanf_s("%d",&number1);
    puts("輸入位移數:");
    scanf_s("%d",&mask);
    puts("若要右移:輸入0否則輸入其他");
    scanf_s("%d",&dir);
    displayBits(number1);
    displayBits(mask);
    shiftBits(number1, mask, dir);
}

void shiftBits(int number1,int mask,int dir)
{
    if (dir == 0)
        displayBits(number1 >> mask);
    else
        displayBits(number1 << mask);
}
//左右移的副程式
// display bits of an unsigned int value
void displayBits(unsigned int value)
{
    // declare displayMask and left shift 31 bits
    unsigned int c, displayMask = 1 << 7;

    printf("%10u = ", value);

    // loop through bits
    for (c = 1; c <= 8; ++c) {
        putchar(value & displayMask ? '1' : '0');
        value <<= 1; // shift value left by 1

        if (c % 8 == 0) { // output a space after 8 bits
            putchar(' ');
        }
    }
    //轉換成二進位數的副程式

    putchar('\n');
}
