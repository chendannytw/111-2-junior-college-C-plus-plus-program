#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct listNode {
    int ID;
    int math, com;
    struct listNode *nextPtr;
    char *name;
};

typedef struct listNode ListNode;
typedef ListNode *ListNodePtr;

void insert(ListNodePtr *sPtr, int id, int math, int computer, char* name);
char delete(ListNodePtr *sPtr, int value);
int isEmpty(ListNodePtr sPtr);
void printList(ListNodePtr currentPtr);
void instructions(void);

int main(void) {
    ListNodePtr startPtr = NULL;
    int item, math, computer;
    char name[100];

    instructions();
    printf("%s", "? ");
    unsigned int choice;
    scanf("%u", &choice);

    while (choice != 3) {

        switch (choice) {
        case 1:
            printf("%s", "Enter ID: ");
            scanf("\n%d", &item);
            printf("%s", "Enter name: ");
            scanf("\n%s", name);
            if (strlen(name) < 2) {
                puts("Name\n");
                break;
            }
            printf("%s", "Enter math grade: ");
            scanf("\n%d", &math);
            printf("%s", "Enter computer grade: ");
            scanf("\n%d", &computer);
            insert(&startPtr, item, math, computer, name);
            printList(startPtr);
            break;
        case 2:
            if (!isEmpty(startPtr)) {
                printf("%s", "Enter ID to be deleted: ");
                scanf("\n%d", &item);
                if (delete(&startPtr, item)) {
                    printf("%d deleted.\n", item);
                    printList(startPtr);
                }
                else {
                    printf("%d not found.\n\n", item);
                }
            }
            else {
                puts("List is empty.\n");
            }
            break;
        default:
            puts("Invalid choice.\n");
            instructions();
            break;
        }

        printf("%s", "? ");
        scanf("%u", &choice);
    }

    puts("End of run.");
}

void instructions(void) {
    puts("Enter your choice:\n"
        "   1 to insert a student record into the list.\n"
        "   2 to delete a student record from the list.\n"
        "   3 to end.");
}

void insert(ListNodePtr *sPtr, int id, int math, int computer, char* name) {
    ListNodePtr newPtr = malloc(sizeof(ListNode));

    if (newPtr != NULL) {
        newPtr->ID = id;
        newPtr->name = malloc(strlen(name) + 1);
        strcpy(newPtr->name, name);
        newPtr->math = math;
        newPtr->com = computer;
        newPtr->nextPtr = NULL;

        ListNodePtr previousPtr = NULL; 
        ListNodePtr currentPtr = *sPtr;

        while (currentPtr != NULL && id > currentPtr->ID) {
            previousPtr = currentPtr;
            currentPtr = currentPtr->nextPtr;
      }                                          

      // insert new node at beginning of list
      if (previousPtr == NULL) { 
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      } 
      else { // insert new node between previousPtr and currentPtr
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      } 
   } 
   else {
      printf("%c not inserted. No memory available.\n", id);
   } 
} 

// delete a list element
char delete(ListNodePtr *sPtr, int value)
{ 
   // delete first node if a match is found
   if (value == (*sPtr)->ID) { 
      ListNodePtr tempPtr = *sPtr; // hold onto node being removed
      *sPtr = (*sPtr)->nextPtr; // de-thread the node
      free(tempPtr); // free the de-threaded node
      return value;
   } 
   else { 
      ListNodePtr previousPtr = *sPtr;
      ListNodePtr currentPtr = (*sPtr)->nextPtr;

      // loop to find the correct location in the list
      while (currentPtr != NULL && currentPtr->ID != value) { 
         previousPtr = currentPtr; // walk to ...  
         currentPtr = currentPtr->nextPtr; // ... next node  
      } 

      // delete node at currentPtr
      if (currentPtr != NULL) { 
         ListNodePtr tempPtr = currentPtr;
         previousPtr->nextPtr = currentPtr->nextPtr;
         free(tempPtr);
         return value;
      } 
   } 

   return '\0';
} 
// return 1 if the list is empty, 0 otherwise
int isEmpty(ListNodePtr sPtr)
{ 
   return sPtr == NULL;
} 

// print the list
void printList(ListNodePtr currentPtr)
{ 
   // if list is empty
   if (isEmpty(currentPtr)) {
      puts("List is empty.\n");
   } 
   else { 
      puts("鏈結串列內容為:");

      // while not the end of the list
      while (currentPtr != NULL) { 
         printf("%d %c %d %d--> ", currentPtr->ID,currentPtr->name,currentPtr->math,currentPtr->com);
         currentPtr = currentPtr->nextPtr;   
      } 

      puts("NULL\n");
   } 
} 
