#include <stdio.h>
#include <標準庫.h>

/* 使用控制台暫停器或添加您自己的 getch、系統（“暫停”）或輸入循環運行此程序 */

#include <stdio.h>
#define 大小 4
#定義STU 13
//int binarySearch(int b[], int searchKey, int low, int high);
結構學生{
    字符名稱[20]；
    無符號整數 stud_id；
    數學；
    內部計算機；
    浮動平均值；
};
//結構學生stud[stu];
typedef 結構學生螺柱；
void sort(stud mystu[STU]);
// 函數 main 開始執行程序
int 主要（無效）
{
    int key, result = 0, i, j;
    // 初始化一個
    
    螺柱 my_stu[STU] = { {"愛麗絲",2,98,72,0},
                        {“丹尼”，3,76,32,0}，
                        {“湯姆”，6,98,67,0}，
                        {“尼娜”，7,89,32,0}，
                        {“五月”,8,98,55,0},
                        {“辛迪”，9,89,32,0}，
                        {“史蒂文”，10,98,65,0}，
                        {“艾倫”，11,99,32,0}，
                        {“妮可”，12,98,71,0}，
                        {“譚”，13,76,91,0}，
                        {“珍妮”，18,93,49,0}，
                        {“鮑勃”，19,67,82,0}，
                        {"蒂姆",20,50,50,0}, };

    puts("在原始訂單中命名 ID 項目");
    // 輸出原始數組
    對於（j = 0；j < STU；j++）
    {
        my_stu[j].avg =(float) (my_stu[j].math + my_stu[j].computer) / 2;
    }

    對於（j = 0；j < STU；j++）
    {
        printf("%28s", my_stu[j].name);
        printf("%4d", my_stu[j].stu_id);
        printf("%6d", my_stu[j].math);
        printf(" %6d", my_stu[j].computer);
        printf(" %6.2f", my_stu[j].avg);
        printf("\n");
    }
    puts("不及格的");
    對於（j = 0；j < STU；j++）{
        如果 (my_stu[j].avg < 60) {
            printf("%28s", my_stu[j].name);
            printf("%4d", my_stu[j].stu_id);
            printf(" %6.2f", my_stu[j].avg);
            printf("\n");
        }
    }

    排序（my_stu）；
    放（“”）;
    puts("排序後:");
  
    對於（j = 0；j < STU；j++）
    {
        printf("%28s", my_stu[j].name);
        printf("%4d", my_stu[j].stu_id);
        printf("%6d", my_stu[j].math);
        printf(" %6d", my_stu[j].computer);
        printf(" %6.2f", my_stu[j].avg);
        printf("\n");
    }
}
/* printf("\n");
    對於 (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }
*/
//冒泡排序                                         
// 循環控制遍數                    
/*
    排序（名稱，a，stu）；
    puts("\n數據項按升序排列");

    對於（j=0；j<stu；j++）
    { printf("%8s", 姓名[j]);
        對於 (i = 0; i < SIZE; ++i) {
            printf("%4d", a[j][i]);
        }
        printf("\n");
    }

}

*/
無效排序（螺柱mystu [STU]）
{
   
    int hold,pass,i;
    void swap(stud * ptr1, stud * ptr2);
    for (pass = 1; pass < STU; ++pass) {

        // 循環控制每次傳遞的比較次數
        for (i = 0; i < STU - pass; ++i) {

            // 比較相鄰元素，如果先交換它們
            // 元素大於第二個元素
            如果 (mystu[i].avg > mystu[i+1].avg) {
                交換（&mystu[i]，&mystu[i + 1]）；
            }
        }
    }

}

void swap(stud *ptr1, stud* ptr2)
{螺柱 hold_stu;
hold_stu =*ptr1;
*ptr1 =*ptr2;
*ptr2 = hold_stu;
}
