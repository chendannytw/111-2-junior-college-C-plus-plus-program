// Fig. 12.3: fig12_03.c
// Inserting and deleting nodes in a list
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// self-referential structure                       
struct listNode {                                      
   //char data; // each listNode contains a character 
   struct listNode *nextPtr; // pointer to next node
   int ID;
   int Math;
   int Computer;
   char Name[20];  
}; 

typedef struct listNode ListNode; // synonym for struct listNode
typedef ListNode *ListNodePtr; // synonym for ListNode*

typedef struct{
    unsigned int StuNum;  //4 bytes
    char Name[20];        //20 bytes
    int math, computer;   //16 bytes    
}stuData;

// prototypes
void insert(ListNodePtr *sPtr, int xID, char xName[10], int xMath, int xComputer);
char delete(ListNodePtr *sPtr, char value);
int isEmpty(ListNodePtr sPtr);
void printList(ListNodePtr currentPtr);
void instructions(void);

void blank(FILE *cfPtr);
void write(FILE *cfPtr, ListNodePtr currentPtr);
void read(FILE *cfPtr);

int main(void)
{ 
   ListNodePtr startPtr = NULL; // initially there are no nodes
   //char item='a'; // char entered by user
   int id=999,math=0,computer=0;
   char name[20]="";
   int havedel=0;

   instructions(); // display the menu
   printf("%s", "? ");
   unsigned int choice; // user's choice
   scanf("%u", &choice);

   // loop while user does not choose 3
   while (choice != 3) { 

      switch (choice) { 
         case 1:
            printf("\n%s", "Enter ID:");
            scanf("\n%d", &id);
            printf("\n%s", "Enter your name:");
            scanf("\n%s", &name);
   	        printf("\n%s", "Enter math score:");
   	        scanf("\n%d", &math);
   	        printf("\n%s", "Enter computer score:");
            scanf("\n%d", &computer);
            insert(&startPtr, id, name, math, computer); // insert item in list
            printList(startPtr);
            break;
         case 2: // delete an element
            // if list is not empty
            if (!isEmpty(startPtr)) { 
               printf("%s", "Enter id to be deleted: ");
               scanf("\n%d", &id);
               
               while(delete(&startPtr, id)){
                	havedel =1;
 			   }
               //printf("%d",havedel) ;

               // if character is found, remove it   
               if (havedel == 1 ) { // remove item
                  if(!isEmpty(startPtr)){
                  	printf("%d deleted.\n", id);
                    printList(startPtr);
				  }
				  else{
                    puts("List is empty.\n");
				  }
               } 
               else {
                  printf("%c not found.\n\n", id);
               }
            } 
            else {
               puts("List is empty.\n");
            }
            break;
            
         default:
            puts("Invalid choice.\n");
            instructions();
            break;
      } // end switch

      printf("%s", "? ");
      scanf("%u", &choice);
   } 
   
   	FILE *cfPtr;            // 建立檔案指標 
    blank(cfPtr);
    write(cfPtr, startPtr);
    read(cfPtr);

   puts("End of run.");
}

 

// display program instructions to user
void instructions(void)
{ 
   puts("Enter your choice:\n"
      "   1 to insert an element into the list.\n"
      "   2 to delete an element from the list.\n"
      "   3 to end.");
} 

// insert a new value into the list in sorted order
void insert(ListNodePtr *sPtr, int xID, char *xName, int xMath, int xComputer)
{ 
   ListNodePtr newPtr = malloc(sizeof(ListNode)); // create node

   if (newPtr != NULL) { // is space available
      newPtr->ID = xID; // place value in node
      *strcpy(newPtr->Name,xName); // place value in node
      newPtr->Math = xMath; // place value in node
      newPtr->Computer = xComputer; // place value in node
      newPtr->nextPtr = NULL; // node does not link to another node

      ListNodePtr previousPtr = NULL;
      ListNodePtr currentPtr = *sPtr;

      // loop to find the correct location in the list       
      while (currentPtr != NULL && xID > currentPtr->ID) {
         previousPtr = currentPtr; // walk to ...               
         currentPtr = currentPtr->nextPtr; // ... next node 
      }                                          

      // insert new node at beginning of list
      if (previousPtr == NULL) { 
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      } 
      else { // insert new node between previousPtr and currentPtr
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      } 
   } 
   else {
      printf("%c not inserted. No memory available.\n", xID, xName, xMath, xComputer);
   } 
} 

// delete a list element
char delete(ListNodePtr *sPtr, char value)
{ 
   if (isEmpty(*sPtr)) { 
   return 0;
   }

   // delete first node if a match is found
   if (value == (*sPtr)->ID) { 
      ListNodePtr tempPtr = *sPtr; // hold onto node being removed
      *sPtr = (*sPtr)->nextPtr; // de-thread the node
      free(tempPtr); // free the de-threaded node
      return value;
   } 
   else { 
      ListNodePtr previousPtr = *sPtr;
      ListNodePtr currentPtr = (*sPtr)->nextPtr;

      // loop to find the correct location in the list
      while (currentPtr != NULL && currentPtr->ID != value) { 
         previousPtr = currentPtr; // walk to ...  
         currentPtr = currentPtr->nextPtr; // ... next node  
      } 

      // delete node at currentPtr
      if (currentPtr != NULL) {
         ListNodePtr tempPtr = currentPtr;
         previousPtr->nextPtr = currentPtr->nextPtr;
         free(tempPtr);
         

         return value;
      } 
   } 

   return '\0';
} 

// return 1 if the list is empty, 0 otherwise
int isEmpty(ListNodePtr sPtr)
{ 
   return sPtr == NULL;
} 

// print the list
void printList(ListNodePtr currentPtr)
{ 
   // if list is empty
   if (isEmpty(currentPtr)) {
      puts("List is empty.\n");
   } 
   else { 
      puts("The list is:");

      // while not the end of the list
      //while (currentPtr != NULL) { 
      while (currentPtr != NULL) { 
         printf("%d %s %d %d --> ", currentPtr->ID, currentPtr->Name, currentPtr->Math, currentPtr->Computer);
         currentPtr = currentPtr->nextPtr; 
      } 

      puts("NULL\n");
   } 
}

void blank(FILE *cfPtr){
    int i;
    if((cfPtr = fopen("doris.dat","wb"))==NULL){     //開啟檔案 
        puts("File could not be opened.");
    }
    else{
        stuData blankstudent = {0,"",0,0};

        for(i = 1 ; i <= 100 ; i++){
            fwrite(&blankstudent, sizeof(stuData),1,cfPtr);   //存取檔案
        }
    }
    fclose(cfPtr);                                            //關閉檔案 
}

void write(FILE *cfPtr, ListNodePtr currentPtr){
    if((cfPtr = fopen("doris.dat","rb+")) == NULL){      //開啟檔案 
        puts("File could not be opened.");
    }
    else if (isEmpty(currentPtr)) {
      puts("List is empty.\n");
    } 
    else{
        stuData student = {0,"",0,0};



        while(currentPtr != 0 ){
		    printf("%d %s %d %d -->", currentPtr->ID, currentPtr->Name, currentPtr->Math, currentPtr->Computer);
            student.StuNum = currentPtr->ID;
            strcpy(student.Name,currentPtr->Name);
            student.math = currentPtr->Math;
            student.computer = currentPtr->Computer;
            fseek(cfPtr,(student.StuNum-1)*sizeof(stuData),SEEK_SET);
            fwrite(&student,sizeof(stuData),1,cfPtr);
            currentPtr = currentPtr->nextPtr;
        }
        puts("NULL\n");
        fclose(cfPtr);                                                //關閉檔案 
    }                        
}

void read(FILE *cfPtr){
    
    stuData stuArr[100];  //新增結構陣列 
    int i=0,j;
    if((cfPtr = fopen("doris.dat","rb")) == NULL){                  //開啟檔案
        puts("File could not be opened.");
    }
    else{
        printf("%-6s%-16s%-10s%-10s\n","Num","Name","math","computer");

        while(!feof(cfPtr)){
            stuData student = {0,"",0,0};

            int result = fread(&student,sizeof(stuData),1,cfPtr);

            if(result != 0 && student.StuNum != 0 ){
                printf("%-6d%-16s%-10d%-10d\n",student.StuNum,student.Name,student.math,student.computer);
                stuArr[i].StuNum=student.StuNum;
                strcpy(stuArr[i].Name,student.Name);
                stuArr[i].math=student.math;
                stuArr[i].computer=student.computer;
                i++;
            }
        }
        fclose(cfPtr);
    }
     printf("\n");
    
    for(j=0;j<i;++j)
        printf("%-6d%-16s%-10d%-10d\n",stuArr[j].StuNum,stuArr[j].Name,stuArr[j].math,stuArr[j].computer);
    printf("\n");  
} 
