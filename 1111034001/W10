#include <stdio.h>
#include <stdlib.h>
#include <string.h>
// self-referential structure                       
struct listNode {                                      
   int ID; // each listNode contains a character 
   int math, com;
   char name[10];
   struct listNode *nextPtr; // pointer to next node
}; 

typedef struct listNode ListNode; // synonym for struct listNode
typedef ListNode *ListNodePtr; // synonym for ListNode*

struct student {
    unsigned int StuNum;
    char Name[20];
    int math;
    int computer;

};

typedef struct student stuData;

// prototypes
void insert(ListNodePtr *sPtr, int id, char *name, int math, int computer);
char delete(ListNodePtr *sPtr, int value);
int isEmpty(ListNodePtr sPtr);
void printList(ListNodePtr currentPtr);
void instructions(void);

void blank(FILE *cfPtr);
void write(FILE *cfPtr,ListNodePtr currentPtr);
void read(FILE *cfPtr);

int main(void)
{ 
   ListNodePtr startPtr = NULL; // initially there are no nodes
   int item,math, computer; // char entered by user
	char name[10];
   instructions(); // display the menu
   printf("%s", "? ");
   unsigned int choice; // user's choice
   scanf("%u", &choice);

   // loop while user does not choose 3
   while (choice != 3) { 

      switch (choice) { 
         case 1:
            printf("%s", "請輸入學號: ");
            scanf("\n%d", &item);
            printf("%10s", "請輸入姓名: ");
            scanf("\n%s", &name);
            printf("%s", "請輸入數學: ");
            scanf("\n%d", &math);
            printf("%s", "請輸入電腦: ");
            scanf("\n%d", &computer);
            insert(&startPtr, item,name,math,computer); // insert item in list
            printList(startPtr);
            break;
         case 2: // delete an element
            // if list is not empty
            if (!isEmpty(startPtr)) { 
               printf("%s", "輸入學號: ");
               scanf("\n%d", &item);

               // if character is found, remove it
               if (delete(&startPtr, item)) { // remove item
                  printf("%d deleted.\n", item);
                  printList(startPtr);
               } 
               else {
                  printf("%d not found.\n\n", item);
               } 
            } 
            else {
               puts("List is empty.\n");
            }    

            break;
         default:
            puts("Invalid choice.\n");
            instructions();
            break;
      } // end switch

      printf("%s", "? ");
      scanf("%u", &choice);
   } 
    FILE *cfPtr;
    blank(cfPtr);
    write(cfPtr,startPtr);
    read(cfPtr);
   puts("End of run.");
} 

// display program instructions to user
void instructions(void)
{ 
   puts("Enter your choice:\n"
      "   1 to insert an element into the list.\n"
      "   2 to delete an element from the list.\n"
      "   3 to end.");
} 

// insert a new value into the list in sorted order
void insert(ListNodePtr *sPtr, int id, char *name, int math, int computer)
{ 
   ListNodePtr newPtr = malloc(sizeof(ListNode)); // create node

   if (newPtr != NULL) { // is space available
      newPtr->ID = id; // place value in node
      strcpy(newPtr->name, name);
      newPtr->math = math; // place value in node
      newPtr->com = computer; // place value in node
      newPtr->nextPtr = NULL; // node does not link to another node

      ListNodePtr previousPtr = NULL;
      ListNodePtr currentPtr = *sPtr;

      // loop to find the correct location in the list       
      while (currentPtr != NULL && id > currentPtr->ID) {
         previousPtr = currentPtr; // walk to ...               
         currentPtr = currentPtr->nextPtr; // ... next node 
      }                                          

      // insert new node at beginning of list
      if (previousPtr == NULL) { 
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      } 
      else { // insert new node between previousPtr and currentPtr
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      } 
   } 
   else {
      printf("%c not inserted. No memory available.\n", id);
   } 
} 

// delete a list element
char delete(ListNodePtr *sPtr, int value)
{ 
   // delete first node if a match is found
   if (value == (*sPtr)->ID) { 
      ListNodePtr tempPtr = *sPtr; // hold onto node being removed
      *sPtr = (*sPtr)->nextPtr; // de-thread the node
      free(tempPtr); // free the de-threaded node
      return value;
   } 
   else { 
      ListNodePtr previousPtr = *sPtr;
      ListNodePtr currentPtr = (*sPtr)->nextPtr;

      // loop to find the correct location in the list
      while (currentPtr != NULL && currentPtr->ID != value) { 
         previousPtr = currentPtr; // walk to ...  
         currentPtr = currentPtr->nextPtr; // ... next node  
      } 

      // delete node at currentPtr
      if (currentPtr != NULL) { 
         ListNodePtr tempPtr = currentPtr;
         previousPtr->nextPtr = currentPtr->nextPtr;
         free(tempPtr);
         return value;
      } 
   } 

   return '\0';
} 
// return 1 if the list is empty, 0 otherwise
int isEmpty(ListNodePtr sPtr)
{ 
   return sPtr == NULL;
} 

// print the list
void printList(ListNodePtr currentPtr)
{ 
   // if list is empty
   if (isEmpty(currentPtr)) {
      puts("List is empty.\n");
   } 
   else { 
      puts("鏈結串列內容為:");

      // while not the end of the list
      while (currentPtr != NULL) { 
         printf("%d %s %d %d--> ", currentPtr->ID,currentPtr->name,currentPtr->math,currentPtr->com);
         currentPtr = currentPtr->nextPtr;   
      } 

      puts("NULL\n");
   } 
}

void blank(FILE *cfPtr) {
    int i;
    if ((cfPtr = fopen("accounts.txt", "wb")) == NULL) {
        puts("File could not be opened.");
    }
    
    else {
        stuData blankstudent = {0, "",0,0};
        for (i = 1; i <= 100; i++) {
            fwrite(&blankstudent, sizeof(stuData), 1, cfPtr);
        }
        fclose(cfPtr);
    }
}

void write(FILE *cfPtr,ListNodePtr currentPtr) {
    if ((cfPtr = fopen("accounts.txt", "rb+")) == NULL) {
        puts("File could not be opened.");
    }
    else if (isEmpty(currentPtr)) {
      puts("List is empty.\n");
   } 
    else {
        stuData student = {0, "",0,0};
        
        while (currentPtr != 0) {
             printf("%d ", currentPtr->ID);
             student.StuNum=currentPtr->ID;
             printf("%s ", currentPtr->name);
             strcpy(student.Name,currentPtr->name);
             printf("%d ", currentPtr->math);
             student.math=currentPtr->math;
             printf("%d -->", currentPtr->com);
             student.computer=currentPtr->com;
          
			fseek(cfPtr, (student.StuNum - 1) * sizeof(stuData), SEEK_SET);
            fwrite(&student, sizeof(stuData), 1, cfPtr);
            currentPtr = currentPtr->nextPtr;
        }
        fclose(cfPtr);
    }
}

void read(FILE *cfPtr) {
	stuData stuArr[100];
	int i=0,j=0;
    if ((cfPtr = fopen("accounts.txt", "rb")) == NULL) {
        puts("File could not be opened.");
    }
    else {
        puts("\n");
        printf("%-6s%-12s%-10s%-10s\n","Num","Name","math","computer");
        while (!feof(cfPtr)) {
		stuData student = {0, "",0,0};
        int result = fread(&student, sizeof(stuData), 1, cfPtr);
        
            if (student.StuNum != 0 && student.StuNum !=0) {
                stuArr[i].StuNum=student.StuNum;
                strcpy(stuArr[i].Name,student.Name);
                stuArr[i].math=student.math;
                stuArr[i].computer=student.computer;

                i++;
            }
        }
        fclose(cfPtr);
    }
    for(j=0;j<i;++j){
    	printf("%-6d%-12s%-10d%-10d\n", stuArr[j].StuNum, stuArr[j].Name,stuArr[j].math,stuArr[j].computer);
	}
    printf("\n");
    
}
